package org.example.hometracker_kurs.telegram;

import org.example.hometracker_kurs.model.Config;
import org.example.hometracker_kurs.model.Task;
import org.example.hometracker_kurs.model.TaskStatus;
import org.example.hometracker_kurs.service.TaskService;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class TelegramReminderBot extends TelegramLongPollingBot {
    private final TaskService taskService;
    private final String token;
    private String chatId;

    public TelegramReminderBot(Config config, TaskService taskService) {
        this.token = config.getTelegramBotToken();
        this.chatId = config.getTelegramChatId(); // –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å null ‚Äî –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è
        this.taskService = taskService;
    }

    @Override
    public String getBotUsername() {
        return "MyFamTaskBot";
    }

    @Override
    public String getBotToken() {
        return token;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            this.chatId = update.getMessage().getChatId().toString();
            String message = update.getMessage().getText().trim().toLowerCase();

            switch (message) {
                case "/start" -> sendWelcomeMessage();
                case "/–Ω–∞–ø–æ–º–Ω–∏" -> sendDailyTasks();
                default -> sendMessage("‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–∂–º–∏ /start –¥–ª—è –ø–æ–º–æ—â–∏.");
            }

        } else if (update.hasCallbackQuery()) {
            this.chatId = update.getCallbackQuery().getMessage().getChatId().toString();
            String callback = update.getCallbackQuery().getData();

            if ("/–Ω–∞–ø–æ–º–Ω–∏".equals(callback)) {
                sendDailyTasks();
            }
        }
    }

    private void sendWelcomeMessage() {
        String text = """
                üëã *–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –¥–æ–º–∞—à–Ω–∏—Ö –¥–µ–ª–∞—Ö.*
                
                –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:
                ‚úÖ `/–Ω–∞–ø–æ–º–Ω–∏` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                ‚è∞ –Ø —Å–∞–º –Ω–∞–ø–æ–º–Ω—é –æ –∑–∞–¥–∞—á–∞—Ö –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ *8:00*

                –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É –∏–ª–∏ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É.
                """;

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.enableMarkdown(true);

        // –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        InlineKeyboardButton remindBtn = new InlineKeyboardButton();
        remindBtn.setText("üîî –ù–∞–ø–æ–º–Ω–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è");
        remindBtn.setCallbackData("/–Ω–∞–ø–æ–º–Ω–∏");

        List<InlineKeyboardButton> row = new ArrayList<>();
        row.add(remindBtn);
        rows.add(row);

        keyboard.setKeyboard(rows);
        message.setReplyMarkup(keyboard);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    public void sendDailyTasks() {
        try {
            List<Task> todayTasks = taskService.getAllTasks().stream()
                    .filter(task -> task.getDueDate() != null
                            && task.getDueDate().isEqual(LocalDate.now())
                            && task.getStatus() == TaskStatus.ACTIVE)
                    .collect(Collectors.toList());

            if (todayTasks.isEmpty()) {
                sendMessage("‚úÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.");
                return;
            }

            StringBuilder sb = new StringBuilder("üìÖ *–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n");

            for (Task task : todayTasks) {
                sb.append("üîπ *").append(task.getName()).append("*\n")
                        .append("üìå ").append(task.getDescription()).append("\n")
                        .append("üë§ ").append(task.getAssignedTo()).append("\n")
                        .append("üè∑Ô∏è ").append(task.getType()).append("\n")
                        .append("üìÖ ").append(task.getDueDate()).append("\n\n");
            }

            sendMessage(sb.toString());

        } catch (Exception e) {
            sendMessage("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void sendMessage(String text) {
        if (chatId == null) {
            System.err.println("‚ùó chatId is null. Cannot send message.");
            return;
        }

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.enableMarkdown(true);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}
